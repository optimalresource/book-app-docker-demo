{
  "swagger": "2.0",
  "info": {
    "description": "This is a small set of rest API endpoints using PHP(Lumen) that can be used for listing the names of books along with their authors and comment count, adding and listing anonymous comments for a book, and getting the character list for a book.",
    "version": "1.0.0",
    "title": "Book, Characters & Comments API",
    "termsOfService": "http://landearn.com",
    "contact": {
      "email": "joseph@landearn.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ec2-13-246-17-45.af-south-1.compute.amazonaws.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "books",
      "description": "Every books on ice and fire",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://landearn.com"
      }
    },
    {
      "name": "characters",
      "description": "Every characters in books"
    },
    {
      "name": "comments",
      "description": "Comments made on books"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/books": {
      "get": {
        "tags": [
          "books"
        ],
        "summary": "Get all books",
        "description": "Use filters 'page' and 'pagesize' for paginated response. Also use 'name', 'fromReleaseDate' and 'toReleaseDate' to filter records. \n \n Example: /books/?page=1&pageSize=3",
        "operationId": "getBooks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Book name (Please put exact name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromReleaseDate",
            "in": "query",
            "description": "Book release date to filter from",
            "required": false,
            "type": "string"
          },
          {
            "name": "toReleaseDate",
            "in": "query",
            "description": "Book release date to filter to",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/books/{id}": {
      "get": {
        "tags": [
          "books"
        ],
        "summary": "Get a single book record",
        "description": "This endpoint helps you get a single book details, you only need supply the id of the book to the url path",
        "operationId": "getBook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get all comments made for a book",
        "description": "Supply the 'book_id' parameter in the url to see all comments made for a book",
        "operationId": "getComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "book_id",
            "in": "query",
            "description": "Book id",
            "required": true,
            "type": "integer",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Post a new comment for a book",
        "description": "Submit a new comment using form data",
        "operationId": "postComment",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "book_id",
            "in": "formData",
            "description": "ID of book that owns the comment",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Comment made by anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_parent",
            "in": "formData",
            "description": "ID of the parent comment for replies under a comment",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get a single comment",
        "description": "This endpoint helps you get a single comment details, you only need supply the id of the comment to the url path",
        "operationId": "getComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "comments"
        ],
        "summary": "Edit a comment",
        "description": "Edit an existing comment using form data",
        "operationId": "editComment",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Edited Comment made by anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete a comment",
        "description": "Delete an existing comment using form data",
        "operationId": "deleteComment",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/characters": {
      "get": {
        "tags": [
          "characters"
        ],
        "summary": "Get all characters",
        "description": "Use filters 'page' and 'pagesize' for paginated response. Also use 'name', 'gender', 'age' to filter your resonse and 'order' paramter with values 'asc' or 'desc' to sort the characters. \n \n Example: /characters/?order=asc \n \n The sort is done using the names of the characters",
        "operationId": "getCharacters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Character name (Please put exact name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "gender",
            "in": "query",
            "description": "Character gender (Male or Female)",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of sorting (asc or desc)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more Joseph",
    "url": "http://github.com/optimalresource"
  }
}
